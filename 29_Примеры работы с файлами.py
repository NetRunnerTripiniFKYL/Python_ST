#Разбор вывода столбцами

"""
В этом примере будет разбираться вывод команды sh ip int br. 
Из вывода команды нам надо получить соответствия имя интерфейса - IP-адрес. 
То есть имя интерфейса - это ключ словаря, а IP-адрес - значение. 
При этом, соответствие надо делать только для тех интерфейсов, у которых назначен IP-адрес.
"""

#Пример вывода команды sh ip int br (файл sh_ip_int_br.txt)

print (" \n#1")

result = {}

with open(r'A:\Users\lakus\Documents\Python\ST\sh_ip_int_br.txt', "r") as f:
    for line in f:
        line_list = line.split()
        if line_list and line_list[1][0].isdigit():
            interface = line_list[0]
            address = line_list[1]
            result[interface] = address

print(result)

"""
Команда sh ip int br отображает вывод столбцами. Значит нужные поля находятся в одной строке. 
Скрипт обрабатывает вывод построчно и каждую строку разбивает с помощью метода split.
Полученный в итоге список содержит столбцы вывода. 
Так как из всего вывода нужны только интерфейсы на которых настроен IP-адрес, выполняется проверка первого символа второго столбца: если первый символ число, значит на интерфейсе назначен адрес и эту строку надо обрабатывать.
Так как для каждой строки есть пара ключ и значение, они присваиваются в словарь: result[interface] = address.
Результатом выполнения скрипта будет такой словарь (тут он разбит на пары ключ-значение для удобства, в реальном выводе скрипта словарь будет отображаться в одну строку)
"""

"""
{'FastEthernet0/0': '15.0.15.1',
 'FastEthernet0/1': '10.0.12.1',
 'FastEthernet0/2': '10.0.13.1',
 'Loopback0': '10.1.1.1',
 'Loopback100': '100.0.0.1'}
"""

#Получение ключа и значения из разных строк вывода

"""
Очень часто вывод команд выглядит таким образом, что ключ и значение находятся в разных строках. 
И надо придумать каким образом обрабатывать вывод, чтобы получить нужное соответствие.
Например, из вывода команды sh ip interface надо получить соответствие имя интерфейса - MTU (файл sh_ip_interface.txt):
"""

"""
Имя интерфейса находится в строке вида Ethernet0/0 is up, line protocol is up, а MTU в строке вида MTU is 1500 bytes.
Например, попробуем запоминать каждый раз интерфейс и выводить его значение, когда встречается MTU, вместе со значением MTU
"""

print (" \n#2")

with open(r'A:\Users\lakus\Documents\Python\ST\sh_ip_interface.txt', "r") as f:
    for line in f:
        if 'line protocol' in line:
            interface = line.split()[0]
        elif 'MTU is' in line:
            mtu = line.split()[-2]
            print('{:15}{}'.format(interface, mtu))

"""
Вывод организован таким образом, что всегда сначала идет строка с интерфейсом, а затем через несколько строк - строка с MTU. 
Если запоминать имя интерфейса каждый раз, когда оно встречается, то на момент когда встретится строка с MTU, последний запомненный интерфейс - это тот к которому относится MTU.
Теперь, если необходимо создать словарь с соответствием интерфейс - MTU, достаточно записать значения на момент, когда был найден MTU.
"""

print (" \n#3")

result = {}

with open(r'A:\Users\lakus\Documents\Python\ST\sh_ip_interface.txt', "r") as f:
    for line in f:
        if 'line protocol' in line:
            interface = line.split()[0]
        elif 'MTU is' in line:
            mtu = line.split()[-2]
            result[interface] = mtu

print(result)

"""
Результатом выполнения скрипта будет такой словарь (тут он разбит на пары ключ-значение для удобства, в реальном выводе скрипта словарь будет отображаться в одну строку)

{'Ethernet0/0': '1500',
 'Ethernet0/1': '1500',
 'Ethernet0/2': '1500',
 'Ethernet0/3': '1500',
 'Loopback0': '1514'}
"""
#Этот прием будет достаточно часто полезен, так как вывод команд, в целом, организован очень похожим образом

#Вложенный словарь

"""
Если из вывода команды надо получить несколько параметров, очень удобно использовать словарь с вложенным словарем.
Например, из вывода `sh ip interface` надо получить два параметра: IP-адрес и MTU. Для начала, вывод информации:
"""

#Тут используется такой же прием, как в предыдущем примере, но добавляется еще одна вложенность словаря

print (" \n#4")

result = {}

with open(r'A:\Users\lakus\Documents\Python\ST\sh_ip_interface.txt', "r") as f:
    for line in f:
        if 'line protocol' in line:
            interface = line.split()[0]
            result[interface] = {}
        elif 'Internet address' in line:
            ip_address = line.split()[-1]
            result[interface]['ip'] = ip_address
        elif 'MTU' in line:
            mtu = line.split()[-2]
            result[interface]['mtu'] = mtu

print(result)

"""
Каждый раз, когда встречается интерфейс, в словаре `result` создается ключ с именем интерфейса, которому соответствует пустой словарь. 
Эта заготовка нужна для того, чтобы на момент когда встретится IP-адрес или MTU можно было записать параметр во вложенный словарь соответствующего интерфейса.
"""

"""
Результатом выполнения скрипта будет такой словарь (тут он разбит на пары ключ-значение для удобства, в реальном выводе скрипта словарь будет отображаться в одну строку)

{'Ethernet0/0': {'ip': '192.168.100.1/24', 'mtu': '1500'},
 'Ethernet0/1': {'ip': '192.168.200.1/24', 'mtu': '1500'},
 'Ethernet0/2': {'ip': '19.1.1.1/24', 'mtu': '1500'},
 'Ethernet0/3': {'ip': '192.168.230.1/24', 'mtu': '1500'},
 'Loopback0': {'ip': '4.4.4.4/32', 'mtu': '1514'}}
"""
