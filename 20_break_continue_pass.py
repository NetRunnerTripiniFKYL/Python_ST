#Оператор break позволяет досрочно прервать цикл

print (" \n#1")

"""
break прерывает текущий цикл и продолжает выполнение следующих выражений
если используется несколько вложенных циклов, 
break прерывает внутренний цикл и продолжает выполнять выражения, 
следующие за блоком * break может использоваться в циклах for и while
"""

#Пример с циклом for

for num in range(10):
    if num < 7:
        print(num)
    else:
        break

#Пример с циклом for

print (" \n#2")

a = 0
while a < 10:
    if a == 5:
        break
    else:
        print(a)
        a += 1

#Оператор continue возвращает управление в начало цикла. То есть, continue позволяет «перепрыгнуть» оставшиеся выражения в цикле и перейти к следующей итерации.
#Пример с циклом for

print (" \n#3")

for num in range(4):
    if num == 2:
        continue
    else:
        print (num)

#Пример с циклом while

print (" \n#4")

g = 14
while g < 18:
    g += 1 
    if g == 16:
        print ("Пропускаем 16")
        continue
        print ("Вы этого не увидете, так как continue это не пропустит")
    else:
        print ("Текущее значение: ", g)


#Оператор pass ничего не делает. Фактически, это такая заглушка для объектов.

#Например, pass может помочь в ситуации, когда нужно прописать структуру скрипта. 
#Его можно ставить в циклах, функциях, классах. И это не будет влиять на исполнение кода.

#Пример использования pass

print (" \n#5")

for num in range(5):
    if num < 3:
        pass
    else:
        print (num)